[{"categories":["配置技巧"],"content":"我好像被网上的”教程“误导了好多，还是要自己实践啊~这块完全是我知识的盲区~太误导了 ","date":"2022-04-12","objectID":"/%E7%B2%97%E7%9C%8Blinux%E4%B8%AD%E7%9A%84cpu%E8%B0%83%E5%BA%A6/:0:0","tags":["PVE","Linux"],"title":"粗看Linux中的CPU调度","uri":"/%E7%B2%97%E7%9C%8Blinux%E4%B8%AD%E7%9A%84cpu%E8%B0%83%E5%BA%A6/"},{"categories":["配置技巧"],"content":"背景 想着物理黑裙切PVE了，估计PVE没啥优化，毕竟是生产软件，肯定性能优先。在网上找了一圈中文资料基本就是 ","date":"2022-04-12","objectID":"/%E7%B2%97%E7%9C%8Blinux%E4%B8%AD%E7%9A%84cpu%E8%B0%83%E5%BA%A6/:1:0","tags":["PVE","Linux"],"title":"粗看Linux中的CPU调度","uri":"/%E7%B2%97%E7%9C%8Blinux%E4%B8%AD%E7%9A%84cpu%E8%B0%83%E5%BA%A6/"},{"categories":["配置技巧"],"content":"先介绍了动态调度的五种模式 performance: 顾名思义只注重效率，将 CPU 频率固定工作在其支持的最高运行频率上，而不动态调节。 Userspace: 最早的 cpufreq 子系统通过 userspace governor 为用户提供了这种灵活性。系统将变频策略的决策权交给了用户态应用程序，并提供了相应的接口供用户态应用程序调节 CPU 运行频率使用。也就是长期以来都在用的那个模式。可以通过手动编辑配置文件进行配置 powersave: 将 CPU 频率设置为最低的所谓 “省电” 模式，CPU 会固定工作在其支持的最低运行频率上。因此这两种 governors 都属于静态 governor，即在使用它们时 CPU 的运行频率不会根据系统运行时负载的变化动态作出调整。这两种 governors 对应的是两种极端的应用场景，使用 performance governor 是对系统高性能的最大追求，而使用 powersave governor 则是对系统低功耗的最大追求。 ondemand: 按需快速动态调整 CPU 频率， 一有 cpu 计算量的任务，就会立即达到最大频率运行，等执行完毕就立即回到最低频率；ondemand：userspace 是内核态的检测，用户态调整，效率低。而 ondemand 正是人们长期以来希望看到的一个完全在内核态下工作并且能够以更加细粒度的时间间隔对系统负载情况进行采样分析的 governor。 在 ondemand governor 监测到系统负载超过 up_threshold 所设定的百分比时，说明用户当前需要 CPU 提供更强大的处理能力，因此ondemand governor 会将 CPU 设置在最高频率上运行。但是当 ondemand governor 监测到系统负载下降，可以降低 CPU 的运行频率时，到底应该降低到哪个频率呢？ ondemand governor 的最初实现是在可选的频率范围内调低至下一个可用频率，例如 CPU 支持三个可选频率，分别为 1.67GHz、1.33GHz 和 1GHz ，如果 CPU 运行在 1.67GHz 时 ondemand governor 发现可以降低运行频率，那么 1.33GHz 将被选作降频的目标频率。 conservative: 与 ondemand 不同，平滑地调整 CPU 频率，频率的升降是渐变式的, 会自动在频率上下限调整，和 ondemand 的区别在于它会按需分配频率，而不是一味追求最高频率； ","date":"2022-04-12","objectID":"/%E7%B2%97%E7%9C%8Blinux%E4%B8%AD%E7%9A%84cpu%E8%B0%83%E5%BA%A6/:1:1","tags":["PVE","Linux"],"title":"粗看Linux中的CPU调度","uri":"/%E7%B2%97%E7%9C%8Blinux%E4%B8%AD%E7%9A%84cpu%E8%B0%83%E5%BA%A6/"},{"categories":["配置技巧"],"content":"接下来的优化手段 安装cpufrequtils 配置intel_pstate=disable ","date":"2022-04-12","objectID":"/%E7%B2%97%E7%9C%8Blinux%E4%B8%AD%E7%9A%84cpu%E8%B0%83%E5%BA%A6/:1:2","tags":["PVE","Linux"],"title":"粗看Linux中的CPU调度","uri":"/%E7%B2%97%E7%9C%8Blinux%E4%B8%AD%E7%9A%84cpu%E8%B0%83%E5%BA%A6/"},{"categories":["配置技巧"],"content":"太雾了 默认情况下，各个发行版的最新的内核基本都是使用的intel_pstate驱动，这驱动只有两个模式performance和powersave，惯性的理解powersave会被固定在最低运行频率上。 啊？这？那就只有关闭intel_pstate了？用acpi-cpufreq这玩意都废弃了呀~ 最后试了一下intel_pstate的powersave。 并没有被固定在800Mhz,最高能到3400Mhz左右~看起来应该是睿频没了， 也可能是我的测试不科学，毕竟我就在shell里面算了一下Π~ 整个小机柜的功耗从85w下降到74w简直惊喜到了有没有~ ","date":"2022-04-12","objectID":"/%E7%B2%97%E7%9C%8Blinux%E4%B8%AD%E7%9A%84cpu%E8%B0%83%E5%BA%A6/:1:3","tags":["PVE","Linux"],"title":"粗看Linux中的CPU调度","uri":"/%E7%B2%97%E7%9C%8Blinux%E4%B8%AD%E7%9A%84cpu%E8%B0%83%E5%BA%A6/"},{"categories":["配置技巧"],"content":"最终配置 安装cpupower,因为安装cpufrequtils的时候发现这东西已经太久没维护了！ cpupower frequency-set --governor powersave ","date":"2022-04-12","objectID":"/%E7%B2%97%E7%9C%8Blinux%E4%B8%AD%E7%9A%84cpu%E8%B0%83%E5%BA%A6/:2:0","tags":["PVE","Linux"],"title":"粗看Linux中的CPU调度","uri":"/%E7%B2%97%E7%9C%8Blinux%E4%B8%AD%E7%9A%84cpu%E8%B0%83%E5%BA%A6/"},{"categories":["配置技巧"],"content":"这次要把公司用了五年的 seafile 做一次硬盘迁移，原来是放在6块2T硬盘组成的raid5上的，要迁移到新补入了一块16T的硬盘去。 服务器只有6个盘位，也考虑过拔掉一块硬盘，毕竟是2015年就脱保的老机器了，担心做到一半 raid5 挂了，也没有更多盘位的机器，所以块复制就不考虑了。 ","date":"2022-03-21","objectID":"/seafile%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/:0:0","tags":["rsync","seafile","linux"],"title":"seafile 数据迁移","uri":"/seafile%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/"},{"categories":["配置技巧"],"content":"准备 seafile 这种文件存储最恼火的就是有大量的小文件，使用块复制是最好的方案。但是，这次的环境显然不满足，就只能考虑文件复制了。 复制的话，我能想到的就cp和rsync， cp还有有风险，服务器上看了一下，大概有5T的数据量，又是小文件，还得上有文件校验和断点续传的东西，那就rsync了， 耗资源一点，毕竟要求稳嘛。 ","date":"2022-03-21","objectID":"/seafile%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/:1:0","tags":["rsync","seafile","linux"],"title":"seafile 数据迁移","uri":"/seafile%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/"},{"categories":["配置技巧"],"content":"动手 ","date":"2022-03-21","objectID":"/seafile%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/:2:0","tags":["rsync","seafile","linux"],"title":"seafile 数据迁移","uri":"/seafile%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/"},{"categories":["配置技巧"],"content":"基本操作 找一台工作机，接上新硬盘，开始内网复制。 192.168.0.240是服务器的内网IP，其他的几个参数 -a参数可以替代-r，除了可以递归同步以外，还可以同步元信息（比如修改时间、权限等）。由于 rsync 默认使用文件大小和修改时间决定文件是否需要更新，所以-a比-r更有用 -v参数表示输出细节。-vv表示输出更详细的信息，-vvv表示输出最详细的信息。 -z参数指定同步时压缩数据。 -h参数表示以人类可读的格式输出。 -P参数是--progress和--partial这两个参数的结合，--progress参数表示显示进展，--partial参数允许恢复中断的传输。 rsync -avzhP root@192.168.0.240:/work /backup/ 以为这样就结束了？让设备跑了一个通宵~还是没跑完，进去看了一些速度大概10M/s，嗯，，，特别棒，感觉这个月的KPI都在这上面了。 ","date":"2022-03-21","objectID":"/seafile%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/:2:1","tags":["rsync","seafile","linux"],"title":"seafile 数据迁移","uri":"/seafile%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/"},{"categories":["配置技巧"],"content":"并行加速 肯定不能够让rsync慢慢来，IO 明显没满，接下来就考虑并行了。 seafile 的数据主要在seafile-data在文件夹里面，分布式存储嘛，就分的文件夹特别多。 工作机是4C8G的配置,服务器16C32G的配置，那就做8个并发！ # 可以合并为一条命令 ssh root@192.168.0.240 '/bin/ls /work/seafile-server/seafile-data/storage/blocks/' \u003e ts.list cat ts.list | xargs -n1 -P8 -I% rsync -avzhP root@192.168.0.240:/work/seafile-server/seafile-data/storage/blocks/% /backup/work/seafile-server/seafile-data/storage/blocks/ 看了一下成果，服务器 CPU 大概 60% 左右，工作机 CPU 负载 20% 左右，磁盘 IO 70% 左右。 毕竟现在写入 90M/s 左右的速度了差不多了已经八倍的快乐了，万事留一线。还干别的事儿呢，就这差不多吧，应该今天下班之前能搞完吧？ ","date":"2022-03-21","objectID":"/seafile%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/:2:2","tags":["rsync","seafile","linux"],"title":"seafile 数据迁移","uri":"/seafile%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/"},{"categories":["配置技巧"],"content":"GIT官方有完整文档，但每次梳理一遍还是太麻烦，还是记录一下一些平时会用到的命令 ","date":"2022-03-20","objectID":"/git/:0:0","tags":["git"],"title":"GIT命令整理","uri":"/git/"},{"categories":["配置技巧"],"content":"维护相关 ","date":"2022-03-20","objectID":"/git/:1:0","tags":["git"],"title":"GIT命令整理","uri":"/git/"},{"categories":["配置技巧"],"content":".git文件夹过大的问题 仓库用久了，特别时和别人合用的仓库，总是会莫名其妙的变特别大，特别是存过大文件以后。用这个命令可以清理一下。gc使用--prune参数来清理特定时期的对象，默认情况下为2周，指定now将删除所有这些对象而没有时期限制。 git gc --prune=now ","date":"2022-03-20","objectID":"/git/:1:1","tags":["git"],"title":"GIT命令整理","uri":"/git/"},{"categories":["配置技巧"],"content":"清除 git 所有历史提交记录 各种原因需要重置仓库，比如不小心加入了敏感信息，或者一直在ci(fix),ci(fix),ci(fix),或者就是单纯的洁癖。那就假装做一个分支吧 # 在当前副本创建清洁的新分支 git checkout --orphan latest_branch # 添加所有文件 git add -A # 提交修改 git commit -m \"init\" # 删除原来的分支 git branch -D mian # 把当前分支重命名为 mian git branch -m mian # 强制推送本地分支到远程 git push -f origin mian echo \"查看新仓库信息：\" git log --pretty=oneline git branch -a git tag git ls-remote --tags ","date":"2022-03-20","objectID":"/git/:1:2","tags":["git"],"title":"GIT命令整理","uri":"/git/"},{"categories":["配置技巧"],"content":"需要用到又不一定能背下了的小命令 ","date":"2022-03-20","objectID":"/devops/:0:0","tags":["curl","docker"],"title":"运维常用调试命令","uri":"/devops/"},{"categories":["配置技巧"],"content":"Web服务 ","date":"2022-03-20","objectID":"/devops/:1:0","tags":["curl","docker"],"title":"运维常用调试命令","uri":"/devops/"},{"categories":["配置技巧"],"content":"自定义的HTTP头 curl -H 'Host:i.tossp.com' http://av8d.app.tossp.com ","date":"2022-03-20","objectID":"/devops/:1:1","tags":["curl","docker"],"title":"运维常用调试命令","uri":"/devops/"},{"categories":["配置技巧"],"content":"重载nginx配置 docker exec nginx /bin/sh -c 'nginx -c /conf/nginx.conf -t \u0026\u0026 nginx -c /conf/nginx.conf -s reload' ","date":"2022-03-20","objectID":"/devops/:1:2","tags":["curl","docker"],"title":"运维常用调试命令","uri":"/devops/"},{"categories":["配置技巧"],"content":"考虑到我有主题变更狂想症，所以只尝试在不变更主题布局文件的基础上动态的引入 Waline 评论系统。 ","date":"2022-03-20","objectID":"/%E4%B8%BAhugo%E7%99%BD%E5%AB%96%E4%B8%80%E5%A5%97%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/:0:0","tags":["hugo","waline","javascript"],"title":"为hugo白嫖一套评论系统","uri":"/%E4%B8%BAhugo%E7%99%BD%E5%AB%96%E4%B8%80%E5%A5%97%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"},{"categories":["配置技巧"],"content":"0. 准备 白嫖方案并不是本文主要，且个运营商不断在调整计费访问，Waline 的官方文档有详细的白嫖教程我这就不重复了。 关注白嫖方案，可以查看这套文档，提供了各种白嫖案例。 需要参考官方文档，部署完成 Waline 后继续操作。 ","date":"2022-03-20","objectID":"/%E4%B8%BAhugo%E7%99%BD%E5%AB%96%E4%B8%80%E5%A5%97%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/:1:0","tags":["hugo","waline","javascript"],"title":"为hugo白嫖一套评论系统","uri":"/%E4%B8%BAhugo%E7%99%BD%E5%AB%96%E4%B8%80%E5%A5%97%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"},{"categories":["配置技巧"],"content":"1. 集成评论系统 每个主题的引入细节，需要参考页面的DOM结构做调整，但总体思路不变 引用 Waline 的客户端 在合适的位置插入标记点并启动客户端 ","date":"2022-03-20","objectID":"/%E4%B8%BAhugo%E7%99%BD%E5%AB%96%E4%B8%80%E5%A5%97%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/:2:0","tags":["hugo","waline","javascript"],"title":"为hugo白嫖一套评论系统","uri":"/%E4%B8%BAhugo%E7%99%BD%E5%AB%96%E4%B8%80%E5%A5%97%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"},{"categories":["配置技巧"],"content":"1.1 引入 Waline 客户端 这一步各个主题都差不多，就是导入一个js。 编辑config.toml在合适的位置放入客户端的脚本https://cdn.jsdelivr.net/npm/@waline/client,我当前使用的LoveIt，关键配置就一行 ... [params.page] [params.page.library] # 第三方库配置 [params.page.library.js] # 加载客户端 walineClientJavascript= \"https://cdn.jsdelivr.net/npm/@waline/client\" ... ","date":"2022-03-20","objectID":"/%E4%B8%BAhugo%E7%99%BD%E5%AB%96%E4%B8%80%E5%A5%97%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/:2:1","tags":["hugo","waline","javascript"],"title":"为hugo白嫖一套评论系统","uri":"/%E4%B8%BAhugo%E7%99%BD%E5%AB%96%E4%B8%80%E5%A5%97%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"},{"categories":["配置技巧"],"content":"1.2 引入 Waline 客户端 上面只是引入了客户端，但客户端并没有真正的开始工作，需要做一个启动脚本。 因为 waline 本身也是动态载入的，为了优雅的添加 waline 集成特别懒的没有做适配PR，所以用查找定位元素的方式去插入必要的标记。 创建文件assets\\js\\comments.js // 完成所有js加载后执行过程 window.addEventListener('load', () =\u003e { var articleElem = document.getElementsByTagName('article'); // 定位到文章页面 if (articleElem.length \u0026\u0026 articleElem[0].className === 'page single') { // 统一查询ID var pathID=window.location.pathname.replace(/\\/$/,'')||'i.TossP' // 添加文章阅读量信息 var metaElem = document.getElementsByClassName('post-meta-line'); if (metaElem.length === 2) { // `waline-visitor-count` 是 waline 已经预定义好的。其他的按样式匹配编写就好 var visitor = \"\u003ci class=\\\"far fa-eye fa-fw\\\"\u003e\u003c/i\u003e \u0026nbsp;阅读量 \u003cspan id=\\\"\" + pathID + \"\\\" class=\\\"waline-visitor-count\\\" \u003e1\u003c/span\u003e 次\u0026nbsp;\" metaElem[1].innerHTML=metaElem[1].innerHTML + visitor } else { console.warn('页面结构变更，定位meta失败', metaElem) } // 添加评论区 var commentElem = document.createElement(\"div\"); // 这里的 id 是主题定义的 commentElem.id = 'comments'; // 这里的 id 必须和下面的 el 参数一致 commentElem.innerHTML='\u003cdiv id=\"waline\"\u003e\u003c/div\u003e' articleElem[0].appendChild(commentElem); // 启动 waline 的客户端，具体参数见说明 Waline({ el: \"#waline\", serverURL: \"https://waline.tossp.com\", visitor: true, requiredMeta: ['nick', 'mail'], dark: 'body[theme=\"dark\"]', path:pathID, emoji: [ 'https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/weibo', 'https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/bilibili', ], }); }; }); 这里的官方文档有完整的客户端参数说明。 dark 模式适配每个主题都可能不一样 一般都是在html或者body元素上。 把页面调为dark模式，看看最顶级的哪个元素上有theme属性或者dark,写入选择器就行。 最后在config.toml中引入这个js脚本 ... [params.page] [params.page.library] # 第三方库配置 [params.page.library.js] # 加载客户端 walineClientJavascript= \"https://cdn.jsdelivr.net/npm/@waline/client\" # 加载启动脚本 commentsJavascript= \"js/comments.js\" ... ","date":"2022-03-20","objectID":"/%E4%B8%BAhugo%E7%99%BD%E5%AB%96%E4%B8%80%E5%A5%97%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/:2:2","tags":["hugo","waline","javascript"],"title":"为hugo白嫖一套评论系统","uri":"/%E4%B8%BAhugo%E7%99%BD%E5%AB%96%E4%B8%80%E5%A5%97%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"},{"categories":["配置技巧"],"content":"制作基于 GitHub Actions 和 Gitlab CI 的工作流文件 ","date":"2022-03-20","objectID":"/hugo%E7%9A%84ci%E5%8F%91%E5%B8%83/:0:0","tags":["github","gitlab","hugo"],"title":"hugo的CI发布","uri":"/hugo%E7%9A%84ci%E5%8F%91%E5%B8%83/"},{"categories":["配置技巧"],"content":"GitHub Actions 配置 创建文件.github\\workflows\\gh-pages.yml name:Github pages 发布on:push:branches:- main # 设置默认发布分支pull_request:workflow_dispatch:jobs:deploy:runs-on:ubuntu-lateststeps:- name:检出代码uses:actions/checkout@v3with:submodules:recursive # 获取 Hugo 主题，也可以使用 truefetch-depth:0# 为 .GitInfo and .Lastmod 取得所有提交历史记录- name:安装Hugouses:peaceiris/actions-hugo@v2with:hugo-version:'latest'extended:true- name:构建run:hugo --gc --minify --enableGitInfo- name:发布uses:peaceiris/actions-gh-pages@v3if:github.ref == 'refs/heads/main'with:github_token:${{ secrets.GITHUB_TOKEN }}publish_dir:./publiccname:i.tossp.compublish_branch:ghforce_orphan:true- name:清理工作流uses:Mattraks/delete-workflow-runs@v2 ","date":"2022-03-20","objectID":"/hugo%E7%9A%84ci%E5%8F%91%E5%B8%83/:1:0","tags":["github","gitlab","hugo"],"title":"hugo的CI发布","uri":"/hugo%E7%9A%84ci%E5%8F%91%E5%B8%83/"},{"categories":["配置技巧"],"content":"Gitlab CI 配置 创建文件.gitlab-ci.yml 其中pages过程名称不可自定义，tags标记必须和执行器的标记匹配，用于选定runner. image:registry.gitlab.com/pages/hugo/hugo_extended:latestvariables:GIT_SUBMODULE_STRATEGY:recursiveGIT_DEPTH:1测试构建:script:- hugoexcept:- mainpages:tags:- tsnscript:- git fetch- hugo --gc --minify --enableGitInfoartifacts:paths:- publiconly:- main ","date":"2022-03-20","objectID":"/hugo%E7%9A%84ci%E5%8F%91%E5%B8%83/:2:0","tags":["github","gitlab","hugo"],"title":"hugo的CI发布","uri":"/hugo%E7%9A%84ci%E5%8F%91%E5%B8%83/"},{"categories":["应用服务"],"content":"安装Hugo并部署发布 ","date":"2022-03-19","objectID":"/hugo/:0:0","tags":["hugo","github","git"],"title":"Hugo使用","uri":"/hugo/"},{"categories":["应用服务"],"content":"准备 日常很多记录做的很零散，也就导致了事后不想整理，也就更导致了零散~兜兜转转最后选择了Hugo. 由于 Hugo 提供的便利性, Hugo 本身就是唯一的依赖. 直接安装满足你操作系统 (Windows, Linux, macOS) 的最新版本  Hugo (\u003e 0.62.0). 推荐使用 Hugo extended 版本 Hugo extended 版本带有  SCSS 转换为  CSS。 ","date":"2022-03-19","objectID":"/hugo/:1:0","tags":["hugo","github","git"],"title":"Hugo使用","uri":"/hugo/"},{"categories":["应用服务"],"content":"搭建 下载或者安装Hugo的可执行程序。 使用命令创建并进入站点目录 ./hugo new site website # 创建名为website的站点 cd website # 进去站点目录 初始化站点仓库 git init 添加一个自己喜欢的主题，并在阅读主题的说明后，参考说明编辑config.toml文件 git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt 添加.gitignore文件，可以参考这个示例 自定义网站图标, 浏览器配置, 网站清单 apple-touch-icon.png (180x180) favicon-32x32.png (32x32) favicon-16x16.png (16x16) mstile-150x150.png (150x150) android-chrome-192x192.png (192x192) android-chrome-512x512.png (512x512) 放在 /static 目录. 利用 https://realfavicongenerator.net/ 可以很容易地生成这些文件. 可以自定义 browserconfig.xml 和 site.webmanifest 文件来设置 theme-color 和 background-color. 配置 .github\\workflows\\gh-pages.yml 文件自动集成 推送代码，并配置自定义域名 ","date":"2022-03-19","objectID":"/hugo/:2:0","tags":["hugo","github","git"],"title":"Hugo使用","uri":"/hugo/"},{"categories":["应用服务"],"content":"使用 使用以下命令启动网站: hugo serve --disableFastRender -D 构建网站 当你准备好部署你的网站时, 运行以下命令: hugo --gc --minify 会生成一个 public 目录, 其中包含你网站的所有静态内容和资源. 现在可以将其部署在任何 Web 服务器上. 技巧 网站内容可以通过 Netlify 自动发布和托管 (了解有关通过 Netlify 进行 HUGO 自动化部署 的更多信息). 或者, 您可以使用 AWS Amplify, Github pages, Render 以及更多… ","date":"2022-03-19","objectID":"/hugo/:3:0","tags":["hugo","github","git"],"title":"Hugo使用","uri":"/hugo/"}]